name: Generate JSON definitions & build
run-name: Generate JSON definitions & build
on: [push]
env:
  CONTAINER_NAME: json-container
jobs:
  create:
    runs-on: ubuntu-latest
    name: Generate JSON definitions & build
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Set environment variables
        run: |
          DISTRO=$(./ci/get-metadata.sh debian-distro)
          PROXMOX_VE_VERSION=$(./ci/get-metadata.sh pve-version)
          echo "DISTRO=$DISTRO" >> "$GITHUB_ENV"
          echo "PROXMOX_VE_VERSION=$PROXMOX_VE_VERSION" >> "$GITHUB_ENV"

      - name: Create container
        run: |
          docker create --mount "type=bind,source=./ci,target=/mnt" --name $CONTAINER_NAME debian:$DISTRO sleep infinity
          docker start $CONTAINER_NAME

      - name: Setup proxmox bookworm
        run: docker exec $CONTAINER_NAME /mnt/setup.sh $DISTRO $PROXMOX_VE_VERSION

      - name: Generate JSON schema
        run: docker exec $CONTAINER_NAME /usr/bin/bash -c "/mnt/dump-schema.pl > /mnt/PVE-schema.json"

      - name: Save package verions
        run: docker exec $CONTAINER_NAME /usr/bin/bash -c "apt list --installed > /mnt/packages.txt"

      - name: Generate the client
        run: cargo run --manifest-path generator/Cargo.toml -- recursive ./ci/PVE-schema.json src/generated.rs

      - name: Format the generated client
        run: cargo fmt -- ./src/generated.rs

      # TODO: validate that generated output is the same as what is being checked in

      - name: Check the generated client
        run: cargo check

      - name: Build the generated client library
        run: cargo build --lib

      - name: build the CLI tool
        run: cargo build --bin promox-api

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            ./ci/PVE-schema.json
            ./ci/packages.txt

      - name: Show line count
        run: wc -l ./ci/PVE-schema.json